{
    "collab_server" : "",
    "contents" : "# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(plotly)\n\nshinyServer(function(input, output) {\n    \n  # identify the clicked-on point\n  getSelection <- function() {\n    # read the current values of the input variables\n    # but dont watch them; only want to trigger on graph clicks\n    # for testing:\n    # Species <- 'setosa'; Metric <- 'Sepal.Width'\n    isolate({\n    i.Species <- input$Species\n    i.Metric <- input$Metric\n    i.Period <- input$Period\n    click <- input$plot_click\n    })  \n    \n    in_scope_ids <- id_mapping[id_mapping[[i.Period]], id]\n    \n    id_vals <- metrics_long[\n      id %in% in_scope_ids &\n      Species==i.Species & \n        Metric==i.Metric, list(id, Value)\n      ]\n    \n    # for testing:\n    # click <- list(x=13.49, y=4)\n    \n    # calculate distance from each point\n    id_vals[, dist := (id - click$x)**2 + (Value-click$y)**2]\n    \n    # take the nearest distance.  break ties if needed\n    best_fit <- id_vals[dist==min(dist)][1,]\n    \n    # clear any old flags, flag selected point as clicked\n    id_mapping[, clicked := F]\n    id_mapping[id==best_fit$id, clicked := T]\n    \n    invisible(NULL)\n    \n  }\n  \n  # update the metric plot (e.g. to highlight points, or change species etc. that has been displayed)\n  updateMetricPlot <- function() {\n    \n    isolate({\n    i.Species <- input$Species\n    i.Metric <- input$Metric\n    i.Period <- input$Period\n    })\n    \n    in_scope_ids <- id_mapping[id_mapping[[i.Period]], id]\n    \n    output$MetricPlot <- renderPlotly({\n      \n      p <- ggplot(\n        metrics_long[\n          id %in% in_scope_ids &\n          Species==i.Species & \n          Metric==i.Metric\n        ], \n        aes(x=id, y=Value)\n      )+\n      geom_line()+\n      geom_point(data=metrics_long[\n        id %in% in_scope_ids &\n        Species==i.Species & \n          Metric==i.Metric & \n          id %in% id_mapping[clicked==T, id]\n      ], color='red')\n      \n      ggplotly(p)\n  \n    })\n  }\n  \n  # update the indicator table\n  updateIndicatorTable <- function() {\n    \n    isolate({\n      i.Species <- input$Species\n      i.Metric <- input$Metric\n      i.Period <- input$Period\n    })\n    \n    in_scope_ids <- id_mapping[id_mapping[[i.Period]], id]\n    \n    output$IndicatorTable <- renderTable({\n      \n      related_metrics <- driver_reln_all[Parent_Metric == i.Metric, Metric]\n      \n      metrics_long[\n          id %in% in_scope_ids &\n            Species==i.Species & \n            Metric %in% related_metrics & \n            id %in% id_mapping[clicked==T, id],\n          list(Metric, Value)\n      ]\n      \n    })\n  }\n  \n  # update the metric plot (e.g. to highlight points, or change species etc. that has been displayed)\n  updateBreakdownPlot <- function() {\n    \n    isolate({\n      i.Species <- input$Species\n      i.Metric <- input$Metric\n      i.Period <- input$Period\n    })\n    \n    in_scope_ids <- id_mapping[id_mapping[[i.Period]], id]\n    \n    output$BreakdownPlot <- renderPlot({\n      \n      related_metrics <- graph_reln_all[Parent_Metric == i.Metric, list(Metric, display_name)]\n      \n      graph_data <- merge(\n        related_metrics,\n        metrics_long[\n          id %in% in_scope_ids &\n            Species==i.Species &\n            id %in% id_mapping[clicked==T, id]\n        ],\n        by.x='Metric',\n        by.y='Metric'\n      )[, list(Category=display_name, Value)]\n      \n      print(graph_data)\n      \n      ggplot(\n        graph_data, \n        aes(x=Category, y=Value)\n      )+geom_bar(stat='identity')\n      \n    })\n  }\n  \n  # if someone clicks, find out what they clicked on and update the plot\n  observeEvent(input$plot_click, {\n    getSelection()\n    updateMetricPlot()\n    updateIndicatorTable()\n    updateBreakdownPlot()\n  })\n  \n  # if a slider changes, update the plot\n  observeEvent({input$Species; input$Metric; input$Period}, {\n    updateMetricPlot()\n    updateIndicatorTable()\n    updateBreakdownPlot()\n  })\n  \n})\n",
    "created" : 1496206974812.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "12|30|47|2|\n",
    "hash" : "1320807532",
    "id" : "51D1DA78",
    "lastKnownWriteTime" : 1496283155,
    "last_content_update" : 1496283155767,
    "path" : "~/Dev/DashboardEx/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}