shiny::runApp()
runApp()
data(iris)
iris
dt <- data.table(data(iris))
library(data.table)
dt <- data.table(data(iris))
iris
dt
data(iris)
dt <- data.table(iris)
dt[, id := seq_len(nrow(dt))-1 %% 50)]
dt[, id := seq_len(nrow(dt))-1 %% 50]
dt
seq_len(nrow(dt))-1 %% 50
seq_len(nrow(dt))-1
?mod
?%%
?`%%`
5 %% 3
149 %% 50
dt[, id := (seq_len(nrow(dt))-1) %% 50]
dt
dt[, id := ((seq_len(nrow(dt))-1) %% 50)+1]
dt
melt(dt, id.vars = c('id', 'Species'), value.name = 'Metric', value.var='Value')
metrics_long <- melt(dt, id.vars = c('id', 'Species'), value.name = 'Metric', value.var='Value')
library(data.table)
data(iris)
dt <- data.table(iris)
dt[, id := ((seq_len(nrow(dt))-1) %% 50)+1]
metrics_long <- melt(dt, id.vars = c('id', 'Species'), value.name = 'Value', variable.name='Metric')
ggplot(metrics_long, aes(x=id, y=Value))
library(data.table)
library(ggplot2)
data(iris)
dt <- data.table(iris)
dt[, id := ((seq_len(nrow(dt))-1) %% 50)+1]
metrics_long <- melt(dt, id.vars = c('id', 'Species'), value.name = 'Value', variable.name='Metric')
ggplot(metrics_long, aes(x=id, y=Value))
ggplot(metrics_long, aes(x=id, y=Value))+geom_line()
ggplot(metrics_long[Species=='setosa' & Metric=='Petal.Width'], aes(x=id, y=Value))+geom_line()
?sliderInput
metrics_long$Metric
unique(as.character(metrics_long$Metric))
runApp()
runApp()
runApp()
?renderPlot
?plotOutput
?textOutput
runApp()
?dist
Species <- 'setosa'; Metric <- 'Sepal.Width'
id_vals <- metrics_long[
Species==Species &
Metric==Metric, list(id, Value)
]
click <- list(x=13.49, y=4)
click
id_vals
id_vals[, dist := (id - click$x)**2 + (Value-click$y)**2]
id_vals
id_vals[dist==min(dist)]
id_vals[dist==min(dist)][1,]
ggplot(metrics_long[Species=='setosa' & Metric=='Petal.Width'], aes(x=id, y=Value))+geom_line()
ggplot(metrics_long[Species=='setosa' & Metric=='Petal.Width'], aes(x=id, y=Value))+geom_line()+
geom_point(data=metrics_long[clicked==T], color='red')
metrics_long[, clicked := F]
ggplot(metrics_long[Species=='setosa' & Metric=='Petal.Width'], aes(x=id, y=Value))+geom_line()+
geom_point(data=metrics_long[clicked==T], color='red')
id_vals[dist==min(dist)][1,]
id_vals
best_fit <- id_vals[dist==min(dist)][1,]
metrics_long[id==best_fit$id & Value==best_fit$Value, clicked := T]
ggplot(metrics_long[Species=='setosa' & Metric=='Petal.Width'], aes(x=id, y=Value))+geom_line()+
geom_point(data=metrics_long[clicked==T], color='red')
metrics_long
iris
?observe
runApp()
best_fit
cat(best_fit)
print(best_fit)
runApp()
runApp()
?reactive
runApp()
runApp()
runApp()
runApp()
?isolate
updatePlot
runApp()
runApp()
runApp()
library(shiny)
?observeEvent
observeEvent
runApp()
runApp()
runApp()
runApp()
runApp()
metrics_long
Species
Species <- 'setosa'
Metric <- 'Sepal.Length'
metrics_long[
Species==Species &
Metric==Metric
]
library(data.table)
metrics_long[
Species==Species &
Metric==Metric
]
runApp()
runApp()
id_mapping <- data.table(unique(metrics_long$id))
id_mapping
id_mapping <- data.table(id=unique(metrics_long$id))
id_mapping
id_mapping[, `Last 12 Months` := (id > 50-12 & id <= 50)]
id_mapping
id_mapping[, `All` := T]
id_mapping
colnames(id_mapping)
setdiff(colnames(id_mapping), 'id')
runApp()
Period
Period <- 'Last 12 Months'
id_mapping[[Period]]
id_mapping[id_mapping[[Period]], id]
in_scope_ids <- id_mapping[id_mapping[[Period]], id]
in_scope_ids
runApp()
id_mapping
runApp()
runApp()
?selectInput
?div
?fluidPage
?tags
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
metrics_long$Metric
gems
data(gems)
data(caret)
data(carat)
data
data(0)
data()
diamonds
iris
metrics_long
unique(metrics_long$Metric)
expand.grid(Metric='Sepal.Length', Parent_Metric=c('Sepal.Length', 'Sepal.Width'))
expand.grid(Metric='Sepal.Length', Parent_Metric=c('Sepal.Length', 'Sepal.Width', 'Petal.Length'))
reln1 <- expand.grid(Metric='Sepal.Length', Parent_Metric=c('Sepal.Length', 'Sepal.Width', 'Petal.Length'))
reln1 <- expand.grid(Parent_Metric='Sepal.Length', Metric=c('Sepal.Length', 'Sepal.Width', 'Petal.Length'))
reln1 <- expand.grid(Parent_Metric='Sepal.Length', Metric=c('Sepal.Length', 'Sepal.Width', 'Petal.Length'))
reln2 <- expand.grid(Parent_Metric='Sepal.Width', Metric=c('Sepal.Length', 'Sepal.Width', 'Petal.Width'))
reln3 <- expand.grid(Parent_Metric='Petal.Width', Metric=c('Petal.Length', 'Sepal.Width', 'Petal.Width'))
reln4 <- expand.grid(Parent_Metric='Petal.Length', Metric=c('Petal.Length', 'Sepal.Length', 'Petal.Width'))
rbindlist(list(reln1,reln2,reln3,reln4))
driver_reln_all <- rbindlist(list(reln1,reln2,reln3,reln4))
driver_reln_all
?renderDataTable
driver_reln_all[Parent_Metric == i.Metric, Metric]
runApp()
runApp()
runApp()
reln1 <- expand.grid(Parent_Metric='Sepal.Length', Metric=c('Sepal.Length', 'Petal.Length'))
reln2 <- expand.grid(Parent_Metric='Sepal.Width', Metric=c('Sepal.Width', 'Petal.Width'))
reln3 <- expand.grid(Parent_Metric='Petal.Width', Metric=c('Sepal.Width', 'Petal.Width'))
reln4 <- expand.grid(Parent_Metric='Petal.Length', Metric=c('Petal.Length', 'Sepal.Length'))
graph_reln_all <- rbindlist(list(reln1,reln2,reln3,reln4))
graph_reln_all
graph_reln_all[, display_name := stringr::str_extract(Metric, '$\\w+')]
graph_reln_all
graph_reln_all[, display_name := stringr::str_detect(Metric, '$\\w+')]
graph_reln_all
graph_reln_all[, display_name := stringr::str_extract(Metric, '^\\w+')]
graph_reln_all
metrics_long
metrics_dim <- unique(metrics_long$Metric)
metrics_dim
metrics_dim <- unique(metrics_long$Metric)
metric_dim[, Graph_Name := stringr::str_extract(Metric, '\\w+$')]
metrics_dim <- unique(metrics_long$Metric)
metrics_dim[, Graph_Name := stringr::str_extract(Metric, '\\w+$')]
metrics_dim <- data.table(Metric=unique(metrics_long$Metric))
metrics_dim[, Graph_Name := stringr::str_extract(Metric, '\\w+$')]
metrics_dim
graph_reln_all
i.Metric <- 'Petal.Length'
related_metrics <- graph_reln_all[Parent_Metric == i.Metric, list(Metric, display_name)]
related_metrics
?I
metrics_long[
id %in% in_scope_ids &
Species==i.Species &
Metric==i.Metric
]
id_mapping
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyBS)
install.packages('shinyBS')
library(shinyBS)
?addTooltip
bsExample("Tooltips_and_Popovers")
library(plotly)
install.packages(plotly)
install.packages('plotly')
?renderPlotly
library(plotly)
?renderPlotly
runApp()
?plotlyOutput
plotlyOutput()
plotlyOutput
htmlwidgets::shinyWidgetOutput
plotOutput()
plotOutput
